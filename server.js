const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const admin = require('firebase-admin');

// --- Firebase ‡§∏‡•á‡§ü‡§Ö‡§™ ---
// ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•Ä 'firebase-service-account.json' ‡§´‡§º‡§æ‡§á‡§≤ ‡§á‡§∏‡•Ä ‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•à
const serviceAccount = require('./firebase-service-account.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
// --- Firebase ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§æ ‡§Ö‡§Ç‡§§ ---

const app = express();
const PORT = process.env.PORT || 8080;

app.use(cors());
app.use(express.json());

// --- ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ ‡§µ‡•à‡§∞‡§ø‡§è‡§¨‡§≤‡•ç‡§∏ ---
const TWELVE_DATA_API_KEY = '211d01dc9a234426b787d02f8b8bd19a';
let alerts = [];
let deviceTokens = new Set(); // ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ü‡•ã‡§ï‡§® ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
let alertIdCounter = 1;
let lastPrices = {};

// --- API Endpoints ---
app.get('/', (req, res) => {
    res.send('FX Alert Backend is running and ready for notifications!');
});

// ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§ü‡•ã‡§ï‡§® ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
app.post('/register-device', (req, res) => {
    const { token } = req.body;
    if (token) {
        deviceTokens.add(token);
        console.log(`Device registered or refreshed. Total devices: ${deviceTokens.size}`);
        res.status(200).send({ message: 'Device registered successfully.' });
    } else {
        res.status(400).send({ message: 'Token is required.' });
    }
});

app.post('/set-alert', (req, res) => {
    const newAlert = req.body;
    newAlert.id = alertIdCounter++;
    alerts.push(newAlert);
    console.log('New Alert Set:', newAlert);
    res.status(200).json({ message: 'Alert set successfully', alert: newAlert });
});

app.get('/get-alerts', (req, res) => {
    res.status(200).json(alerts);
});

app.post('/delete-alert', (req, res) => {
    const { id } = req.body;
    alerts = alerts.filter(alert => alert.id !== id);
    console.log('Alert Deleted: ID', id);
    res.status(200).json({ message: 'Alert deleted successfully' });
});

// --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ö‡•á‡§ï‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® (‡§∏‡•Å‡§ß‡§∞‡§æ ‡§π‡•Å‡§Ü) ---
const checkAlerts = async () => {
    if (alerts.length === 0 || deviceTokens.size === 0) {
        // ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§Ø‡§æ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§® ‡§ï‡§∞‡•á‡§Ç
        return;
    }

    const symbols = [...new Set(alerts.map(a => a.symbol.replace('-', '/')))];
    if (symbols.length === 0) return;

    try {
        const url = `https://api.twelvedata.com/price?symbol=${symbols.join(',')}&apikey=${TWELVE_DATA_API_KEY}`;
        const response = await fetch(url);
        const priceData = await response.json();

        // API ‡§∏‡•á ‡§ï‡§à ‡§∏‡§ø‡§Ç‡§¨‡§≤ ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§Ü‡§§‡§æ ‡§π‡•à
        const prices = priceData.code >= 400 ? {} : priceData;

        const triggeredAlerts = [];

        for (const symbolKey in prices) {
            // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø API ‡§∏‡•á ‡§ï‡•Ä‡§Æ‡§§ ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à
            if (!prices[symbolKey] || !prices[symbolKey].price) continue;
            
            const currentPrice = parseFloat(prices[symbolKey].price);
            const htmlSymbol = symbolKey.replace('/', '-');
            const previousPrice = lastPrices[htmlSymbol] || currentPrice;

            alerts.forEach(alert => {
                if (alert.symbol === htmlSymbol) {
                    let conditionMet = false;
                    // "Crosses Above" ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§: ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ï‡•Ä‡§Æ‡§§ <= ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•Ä‡§Æ‡§§ > ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø
                    if (alert.condition === '>' && currentPrice > alert.value && previousPrice <= alert.value) {
                        conditionMet = true;
                    } 
                    // "Crosses Below" ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§: ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ï‡•Ä‡§Æ‡§§ >= ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•Ä‡§Æ‡§§ < ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø
                    else if (alert.condition === '<' && currentPrice < alert.value && previousPrice >= alert.value) {
                        conditionMet = true;
                    }
                    
                    if (conditionMet) {
                        console.log(`ALERT TRIGGERED: ${alert.symbol} at ${currentPrice} (Condition: ${alert.condition} ${alert.value})`);
                        triggeredAlerts.push(alert);
                    }
                }
            });
            // ‡§Ö‡§ó‡§≤‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ï‡•Ä‡§Æ‡§§ ‡§ï‡•ã "‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ï‡•Ä‡§Æ‡§§" ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
            lastPrices[htmlSymbol] = currentPrice;
        }

        // --- ‡§Ö‡§¨ ‡§∏‡§≠‡•Ä ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞ ‡§π‡•Å‡§è ‡§Ö‡§≤‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§≠‡•á‡§ú‡•á‡§Ç ---
        if (triggeredAlerts.length > 0 && deviceTokens.size > 0) {
            const tokens = Array.from(deviceTokens); // Set ‡§ï‡•ã Array ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
            const triggeredAlertIds = [];

            for (const alert of triggeredAlerts) {
                const messageBody = alert.type === 'indicator'
                    ? `Price ${alert.condition === '>' ? 'crossed above' : 'crossed below'} ${alert.name} at ${alert.value.toFixed(4)}`
                    : `Price ${alert.condition === '>' ? 'crossed above' : 'crossed below'} ${alert.value.toFixed(4)}`;

                const message = {
                    notification: {
                        title: `üîî Alert: ${alert.symbol}`,
                        body: messageBody
                    },
                    tokens: tokens,
                    android: {
                        priority: 'high',
                        notification: { sound: 'default', channelId: 'fcm_default_channel' }
                    },
                    apns: { // iOS ‡§ï‡•á ‡§≤‡§ø‡§è
                        payload: { aps: { sound: 'default' } }
                    }
                };
                
                try {
                    const response = await admin.messaging().sendMulticast(message);
                    console.log(response.successCount + ` messages sent successfully for alert ID ${alert.id}`);
                    triggeredAlertIds.push(alert.id);
                } catch (error) {
                    console.error(`Error sending message for alert ID ${alert.id}:`, error);
                }
            }

            // ‡§ú‡•ã ‡§Ö‡§≤‡§∞‡•ç‡§ü‡•ç‡§∏ ‡§≠‡•á‡§ú‡•á ‡§ú‡§æ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç, ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
            if (triggeredAlertIds.length > 0) {
                alerts = alerts.filter(a => !triggeredAlertIds.includes(a.id));
                console.log(`Removed ${triggeredAlertIds.length} triggered alerts from the active list.`);
            }
        }

    } catch (error) {
        console.error('Error in checkAlerts function:', error.message);
    }
};

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    // ‡§π‡§∞ 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
    setInterval(checkAlerts, 30000);
});